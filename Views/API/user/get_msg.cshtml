@using SL.Util;
@using PushSharp.Apple;
@using PushSharp;
@{
    RequestUtil req = new RequestUtil();

    int userId = req.Int("userId", false, "参数错误:userId");
    string auth = req.String("auth", false, "参数错误:auth");

    int page = req.Int("page");
    int pageSize = req.Int("pageSize", 10);
    string newAuth;

    if (req.HasError)
    {
        Json.Write(new { success = false, msg = req.FirstError, errors = req.GetErrors() }, Output);
    }
    else if (!AuthHelper.Check(userId, auth, out newAuth))
    {
        Json.Write(new { success = false, msg = "登录过期，请重新登录" }, Output);
    }
    else
    {
        using (SL.Data.Database db = SL.Data.Database.Open("MS_ABS"))
        {
            int total;
            var data = db.QueryPage("MSG_ID",
                "MSG_ID,MSG_TITLE,MSG_CONTENT,MSG_DT,LPM_STATUS,LPM_START_DT,LPM_READ_DT,MSG_ALL_FLAG",
                "BMessage left join LPspMsg on MSG_ID=LPM_MSG_ID",
                "LPM_MDT_ID=4 and ((MSG_ALL_FLAG=0 and LPM_PSP_ID=@p1) or MSG_ALL_FLAG=1) and @p0 between MSG_START_DT and MSG_END_DT",
                page,
                pageSize,
                new object[] { DateTime.Now, userId },
                out total,
                new Dictionary<string, bool> { { "LPM_START_DT", false } });

            bool hasRead = false;

            if (data != null)
            {
                data.All(a =>
                {
                    if (a.MSG_ALL_FLAG == false)
                    {
                        if (a.LPM_STATUS == 0)
                        {
                            hasRead = true;
                            db.Execute("update LPspMsg set LPM_STATUS=1 where LPM_MSG_ID=@p0 and LPM_PSP_ID=@p1", a.MSG_ID, userId);
                        }
                    }
                    else
                    {
                        if (a.LPM_STATUS == null)
                        {
                            hasRead = true;

                            db.Execute("insert into LPspMsg (LPM_STATUS,LPM_MSG_ID,LPM_PSP_ID) values (1,@p0,@p1)", a.MSG_ID, userId);
                        }
                    }
                    return true;
                });
            }

            if (hasRead)
            {
                var deviceToken = db.QueryValue<string>("select XPS_MOBILE_IMEI from XProspect where XPS_PSP_ID=@p0", userId);

                if (deviceToken.StartsWith("<"))
                {
                    deviceToken = deviceToken.TrimStart('<').TrimEnd('>').Replace(" ", "");

                    //Create our push services broker
                    var push = new PushSharp.PushBroker();

                    //Registering the Apple Service and sending an iOS Notification
                    var appleCert = File.ReadAllBytes(Server.MapPath("~/ApnsProductionCert.p12"));
                    push.RegisterAppleService(new ApplePushChannelSettings(appleCert, "12345Qwert"));
                    push.QueueNotification(new AppleNotification()
                                               .ForDeviceToken(deviceToken)
                                               .WithBadge(0));
                }
            }

            Json.Write(new { success = true, data = data, total = total }, Output);
        }
    }
}
